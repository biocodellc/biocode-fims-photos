buildscript {
    repositories {
        maven {
            url "http://repo.biocodellc.com/repository/maven-private/"
            credentials {
                username mavenUser
                password mavenPass
            }
        }
        mavenLocal()
    }
    dependencies {
        classpath "org.biocode:gradle-fims:1.3.2"
    }
}

apply plugin: "org.biocode.fims-app"

if (!project.hasProperty('fimsCommonsVersion')) {
    ext.fimsCommonsVersion = "1.0.0-beta.3"
}

fims {
    maven {
        username mavenUser
        password mavenPass
    }
}

repositories {
    add(fims.mavenFims())
    mavenLocal()
}

// need to evaluate childProjects first so we can add the childProject server dependencies to the server configuration
evaluationDependsOnChildren()

dependencies {
    server 'commons-lang:commons-lang:2.6'
    server group: 'org.imgscalr', name: 'imgscalr-lib', version: '4.2'
    server group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.8.4'
    server 'org.slf4j:slf4j-log4j12:1.7.19'
    server group: 'org.springframework', name: 'spring-context', version: '4.3.6.RELEASE'
    server 'org.springframework.data:spring-data-jpa:1.10.1.RELEASE'
    server group: 'org.glassfish.jersey.ext', name: 'jersey-spring4', version: '2.27'
    server 'org.hibernate:hibernate-entitymanager:5.1.0.Final'

    compile composite.resolveDependency("org.biocode:biocode-fims-commons:${fimsCommonsVersion}", ":biocode-fims-commons")

    testCompile "junit:junit-dep:4.10"
    testCompile 'org.mockito:mockito-all:1.9.5'

    integrationTestCompile project(path: ":biocode-fims-commons", configuration: "integrationTestOutput")

    subprojects.each {
        project.configurations.server.dependencies.addAll(it.configurations.server.dependencies)
        project.configurations.serverRuntime.dependencies.addAll(it.configurations.serverRuntime.dependencies)
    }
}
//
//task integrationTest(type: Test) {
//    testClassesDir = sourceSets.integrationTest.output.classesDir
//    classpath = sourceSets.integrationTest.runtimeClasspath
//    outputs.upToDateWhen { false }
//}
//
//check.dependsOn integrationTest
//integrationTest.mustRunAfter test
//
//tasks.withType(Test) {
//    reports.html.destination = file("${reporting.baseDir}/${name}")
//}
